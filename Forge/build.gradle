plugins {
    id "dev.architectury.loom" version "0.12.+"
    // this depends on an older version of guava, which loom is incompatible with, so make sure to apply this plugin after loom
    // haven't found a proper way to manage plugin dependencies otherwise
    id 'me.hypherionmc.cursegradle' version '2.+'
    // cannot apply this in the base build.gradle as it'll be the same for all subprojects, only one configuration will work
    id 'com.modrinth.minotaur' version '2.+'
}

archivesBaseName = rootProject.name
version = "v${modVersion}-${minecraftVersion}-Forge"
group = modMavenGroup

loom {
    silentMojangMappingsLicense()
    mixin.defaultRefmapName = "${modId}.refmap.json"

    runs {
        client {
            client()
            setConfigName("Forge Client")
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs  '-Xms1G', '-Xmx4G', '-Dmixin.debug.export=true'
        }
        server {
            server()
            setConfigName("Forge Server")
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs  '-Xms1G', '-Xmx4G', '-Dmixin.debug.export=true'
        }
    }


    forge {
        if (project(":Common").file("src/main/resources/${modId}.common.mixins.json").exists()) {
            mixinConfig "${modId}.common.mixins.json"
        }

        if (project.file("src/main/resources/${modId}.forge.mixins.json").exists()) {
            mixinConfig "${modId}.forge.mixins.json"
        }

        dataGen {
            mod project.modId
        }
    }

    launches {
        data {
            arg '--existing', project(":Common").file('src/main/resources/').absolutePath
//            arg '--output', file('src/generated/resources/').absolutePath
        }
    }
}

dependencies {
    // Include Common Project
    compileOnly project(":Common")

    // Minecraft
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraftVersion}:${parchmentMappingsVersion}@zip")
    }
    forge "net.minecraftforge:forge:${forgeVersion}"

    // Quality of Life Mods
    modRuntimeOnly "curse.maven:catalogue-459701:3873264"
    modRuntimeOnly "fuzs.bettermodsbutton:bettermodsbutton-forge:4.2.0"
    modRuntimeOnly "curse.maven:configured-457570:4011355"

    // Puzzles Lib
    modImplementation "fuzs.puzzleslib:puzzleslib-forge:${puzzlesVersion}"

    // Apotheosis
    modImplementation "curse.maven:placebo-283644:4036338"
    modImplementation "curse.maven:apotheosis-313970:4036357"
}

processResources {
    from(project(":Common").sourceSets.main.resources) {
        // we need to have this in common so that in a non-production environment the common jar is correctly deobfuscated
        exclude("quilt.mod.json")
    }
    exclude('.cache/')

    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when a value changes
    inputs.property "modId", "${modId}"
    inputs.property "modName", "${modName}"
    inputs.property "modVersion", "${modVersion}"
    inputs.property "modDescription", "${modDescription}"
    inputs.property "modGroup", project.group
    inputs.property "modPageUrl", "${modSourceUrl}"
    inputs.property "modUpdateUrl", "${modUpdateUrl}"
    inputs.property "modIssueUrl", "${modIssueUrl}"
    inputs.property "modAuthor", "${modAuthor}"
    inputs.property "minFMLVersion", "${minForgeVersion}".replaceAll("\\..*", "")
    inputs.property "minForgeVersion", "${minForgeVersion}"
    inputs.property "minMinecraftVersion", "${minMinecraftVersion}"
    inputs.property "nextMinecraftVersion", rootProject.getNextVersion("${minMinecraftVersion}")
    inputs.property "minPuzzlesVersion", "${minPuzzlesVersion}"
    inputs.property "packFormat", "${packFormat}"
    inputs.property "modForgeDisplayTest", "${modForgeDisplayTest}"

    // replace stuff in mods.toml and pack.mcmeta
    filesMatching ('META-INF/mods.toml') {
        expand (
                'modId':                "${modId}",
                'modName':              "${modName}",
                'modVersion':           "${modVersion}",
                'modDescription':       "${modDescription}",
                'modGroup':             project.group,
                'modPageUrl':           "${modSourceUrl}",
                'modUpdateUrl':         "${modUpdateUrl}",
                'modIssueUrl':          "${modIssueUrl}",
                'modAuthor':            "${modAuthor}",
                'minFMLVersion':        "${minForgeVersion}".replaceAll("\\..*", ""),
                'minForgeVersion':      "${minForgeVersion}",
                'minMinecraftVersion':  "${minMinecraftVersion}",
                'nextMinecraftVersion': rootProject.getNextVersion("${minMinecraftVersion}"),
                'minPuzzlesVersion':    "${minPuzzlesVersion}",
                'modForgeDisplayTest':  "${modForgeDisplayTest}"
        )
    }

    filesMatching ('pack.mcmeta') {
        expand (
                'modDescription':       "${modDescription}",
                "packFormat":           "${packFormat}"
        )
    }
}

compileJava {
    source project(":Common").sourceSets.main.allSource
}

sourcesJar {
    from project(":Common").sourceSets.main.allJava
}

javadoc {
    source project(":Common").sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            artifactId = "${modId}-forge"
            version = modVersion
            from components.java
            pom {
                name = "${modName} [Forge]"
                description = "${modDescription}"
                url = "${modSourceUrl}"
                scm {
                    url = "${modSourceUrl}"
                    connection = "${modSourceUrl}".replace("https", "scm:git:git").concat(".git")
                    developerConnection = "${modSourceUrl}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                }
                issueManagement {
                    system = 'github'
                    url = "${modIssueUrl}"
                }
                licenses {
                    license {
                        name = 'MPL-2'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
                developers {
                    developer {
                        id = "${modAuthor}".toLowerCase()
                        name = "${modAuthor}"
                    }
                }
            }
            afterEvaluate {
                // exclude certain dependencies when publishing to maven
                // from https://stackoverflow.com/a/50121790
                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        // use this approach to make excluding dependencies from Curse Maven more convenient
                        if (["curse.maven:", "fuzs.bettermodsbutton:bettermodsbutton-forge"].stream().anyMatch(mod -> "${dep.groupId.last().value().last()}:${dep.artifactId.last().value().last()}".startsWith(mod))) {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'FuzsModResources'
            url "file://" + project.hasProperty('modResources') ? "${project.findProperty('modResources')}/maven" : System.getenv('local_maven')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

curseforge {
    if (!file('../CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }
    apiKey = project.hasProperty('curseApiToken') ? project.findProperty('curseApiToken') : ''
    project {
        id = projectCurseId
        changelogType = 'markdown'
        changelog = file('../CHANGELOG.md')
        releaseType = projectReleaseType
        addGameVersion 'Forge'
        projectGameVersions.split(",").each {
            addGameVersion it.trim()
        }
        mainArtifact(jar) {
            displayName = "[FORGE] [${minecraftVersion}] ${rootProject.name}-v${modVersion}"
            relations {
                requiredDependency 'puzzles-lib'
            }
        }
//        addArtifact sourcesJar
    }
    options {
//        debug = true
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

modrinth {
    if (!file('../CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }
    token = project.hasProperty('modrinthApiToken') ? project.findProperty('modrinthApiToken') : ''
    projectId = projectModrinthId
    versionNumber = project.version
    versionName = "[FORGE] [${minecraftVersion}] ${rootProject.name}-v${modVersion}"
    changelog = file('../CHANGELOG.md').text
    versionType = projectReleaseType
    uploadFile = jar // This is the java jar task
    projectGameVersions.split(",").each {
        gameVersions.add it.trim()
    }
    loaders.add 'forge'
//    additionalFiles.add file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-sources.jar")
    dependencies {
        required.project 'puzzles-lib'
    }
//	debugMode = true
}

import groovy.json.*

task copyJarToDir(type: Copy) {
    onlyIf { project.hasProperty('buildJarOutputDir') && project.hasProperty('uniqueBuildNumber') }
    if (project.findProperty('copyBuildJar').toBoolean()) {
        // shortcut for jar.outputs.files
        from jar
        into project.findProperty('buildJarOutputDir')
        // add build number to be able to distinguish jars when testing thorough official launcher
        // build number is stored in global gradle.properties
        rename { fileName -> fileName.replace("v${modVersion}", "v${modVersion}.${uniqueBuildNumber}") }
    }
}

task refreshUpdateJson {
    onlyIf { project.hasProperty('modResources') }
    doLast {
        def updateFile = file(project.findProperty('modResources').concat(File.separator).concat('update').concat(File.separator).concat("${modId}").concat('.json'))
        def updateJson
        if (updateFile.exists() && updateFile.canRead()) {
            updateJson = new JsonSlurper().parseText(updateFile.text)
            "${projectGameVersions}".replaceAll(" ", "").split(",").each { version ->
                updateJson['promos']["${version}-latest"] = "${modVersion}"
                // alpha and beta releases will contain 'a' or 'b' char respectively, don't update recommended for those
                if ("${modVersion}".matches("[^a-zA-Z]+")) {
                    updateJson['promos']["${version}-recommended"] = "${modVersion}"
                }
            }
        } else {
            def builder = new JsonBuilder()
            updateJson = builder {
                homepage "${modSourceUrl}"
                promos { "${projectGameVersions}".replaceAll(" ", "").split(",").each { version ->
                    "${version}-latest" "${modVersion}"
                    // alpha and beta releases will contain 'a' or 'b' char respectively, don't update recommended for those
                    if ("${modVersion}".matches("[^a-zA-Z]+")) {
                        "${version}-recommended" "${modVersion}"
                    }
                } }
            }
        }
        def output = new JsonOutput()
        updateFile.write(output.prettyPrint(output.toJson(updateJson)))
    }
}

task("forgeBuild").finalizedBy project.tasks.copyJarToDir, rootProject.tasks.incrementBuildNumber
[tasks.modrinth, tasks.curseforge].each {it.finalizedBy project.tasks.refreshUpdateJson}
